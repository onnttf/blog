{"id":"D_kwDONzrbkM4AeLcC","title":"iOS Widget 开发指南","body":"在 `iOS` 应用中，`Widget` 是一种小型的应用扩展，它允许用户通过设备的通知中心或主屏幕直接访问应用中的关键信息。开发一个 `Widget` 需要进行一系列的配置和代码实现。在本文中，我们将逐步介绍如何开发一个 `Widget`，从账号配置到实际开发的每个步骤，帮助你顺利完成开发。\r\n\r\n## 账号配置\r\n\r\n### 申请 `GroupID`\r\n\r\n1. 在开发者账户中，进入 `App Groups` 配置页\r\n\r\n   ![image](https://file.onnttf.site/2017/08/29/1.jpeg)\r\n\r\n2. 根据页面提示，按要求填写相关信息\r\n\r\n   - **`Description`**\r\n\r\n     填写这个 `App Group` 的描述。示例：`Shared Resources for MyApp Widget`\r\n\r\n   - **`ID`**\r\n\r\n     填写这个 `App Group` 的标识，建议以 `com.{aaa}.{bbb}` 命名，填写完毕时，会默认在前面加上 `group`。示例：`com.mycompany.myapp`\r\n\r\n完成创建后，如图：\r\n\r\n![image](https://file.onnttf.site/2017/08/29/2.jpeg)\r\n\r\n### 将 `App Group` 添加到 `App ID` 中\r\n\r\n1. 打开你的 `App ID` 配置页面\r\n2. 找到 `App Groups` 选项，将之前创建的 `GroupID` 勾选启用\r\n\r\n![image](https://file.onnttf.site/2017/08/29/3.jpeg)\r\n\r\n### 重新激活 Provisioning Profile\r\n\r\n操作过 `App ID` 后，需要重新激活或更新关联的 `Provisioning Profile` 以同步新的权限。\r\n\r\n1. 在 `Apple Developer Account` 中找到对应的 `Provisioning Profile`\r\n2. 点击 Edit 或重新生成\r\n\r\n## 项目配置\r\n\r\n### App Target 配置\r\n\r\n1. 打开项目设置，进入 `App Target` 的 `Capabilities` 页签\r\n2. 找到 `App Groups` 选项\r\n3. 勾选之前创建的 `App Group`\r\n\r\n   ![image](https://file.onnttf.site/2017/08/29/5.jpeg)\r\n\r\n### Widget Target 配置\r\n\r\n1. 打开项目设置，进入 `Widget Target` 的 `General` 页签\r\n2. 设置 `Bundle Identifier`，需遵循以下规则\r\n\r\n   - 前缀必须包含主应用的 `Bundle Identifier`\r\n   - 后缀可以自定义，但不能是 `widget`\r\n\r\n示例：\r\n\r\n如果主项目的 `Bundle Identifier` 是 `com.mycompany.myapp`。那 `Widget` 的 `Bundle identifier` 可以是 `com.mycompany.myapp.today`。\r\n\r\n## 开发阶段\r\n\r\n在完成基础配置后，我们进入 `Widget` 的开发阶段。\r\n\r\n### 创建 Widget Target\r\n\r\n1. 在主项目中创建一个新的 `Target`，选择 `Today Extension`\r\n\r\n   ![image](https://file.onnttf.site/2017/09/07/1.jpeg)\r\n\r\n2. 完成后会自动生成如下文件\r\n\r\n   ![image](https://file.onnttf.site/2017/09/07/2.jpeg)\r\n\r\n### 修改 Widget Target 配置\r\n\r\n按需对 `Widget` 的 `Info.plist` 进行修改。\r\n\r\n- 修改 `Widget` 在通知栏中显示的名称\r\n\r\n  通过修改 `Bundle Display Name` 内容，给 `Widget` 名称设置一个简洁易懂的名字\r\n\r\n- 使用纯代码开发\r\n\r\n  1. 删除 `NSExtensionMainStoryboard` 键值对，并移除默认生成的 `MainInterface.storyboard` 文件\r\n  2. 添加 `NSExtensionPrincipalClass` 键，将值设为主控制器类名（如 `TodayViewController`）\r\n\r\n### 开发工作\r\n\r\n在配置完成之后，进入开发阶段。`Widget` 开发不复杂，遵循文档即可开发出美观实用的 `Widget`，但需要留意一些版本差异和细节问题。\r\n\r\n#### 兼容适配\r\n\r\n##### iOS8\r\n\r\n- 没有折叠和展开功能\r\n- 默认 Widget 高度由 `self.preferredContentSize` 控制\r\n\r\n  ```objc\r\n  self.preferredContentSize = CGSizeMake(kScreenW, 100);\r\n  ```\r\n\r\n- 组件布局默认向右偏移 30 单位，可以通过 `widgetMarginInsetsForProposedMarginInsets` 方法进行调整\r\n\r\n  ```objc\r\n  - (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets {\r\n     return UIEdgeInsetsMake(0, 0, 0, 0);\r\n  }\r\n  ```\r\n\r\n##### iOS 10 及之后\r\n\r\n- `Widget` 支持了两种显示模式\r\n\r\n  - NCWidgetDisplayModeCompact\r\n\r\n    高度固定，最低高度为 `110`\r\n\r\n  - NCWidgetDisplayModeExpanded\r\n\r\n    高度可变\r\n\r\n- 设置显示模式\r\n\r\n  **需要在设定 `Size` 前设定这个属性**\r\n\r\n  ```objc\r\n  - (void)viewDidLoad {\r\n      [super viewDidLoad];\r\n      if ([[UIDevice currentDevice] systemVersion].intValue >= 10) {\r\n          self.extensionContext.widgetLargestAvailableDisplayMode = NCWidgetDisplayModeCompact; // 或 NCWidgetDisplayModeExpanded\r\n      }\r\n      self.preferredContentSize = CGSizeMake(kScreenW, 100);\r\n      [self setupUI];\r\n  }\r\n  ```\r\n\r\n- 监听显示模式变化\r\n\r\n  当显示模式设置为 `NCWidgetDisplayModeExpanded` 时，点击折叠和打开时，会触发下面这个方法，在这个方法中可以修改对应状态的高度。修改完毕后，更新视图即可看到最新的布局。\r\n\r\n  ```objc\r\n  - (void)widgetActiveDisplayModeDidChange:(NCWidgetDisplayMode)activeDisplayMode withMaximumSize:(CGSize)maxSize {\r\n      if (activeDisplayMode == NCWidgetDisplayModeCompact) {\r\n          self.preferredContentSize = CGSizeMake(maxSize.width, 110);\r\n      } else {\r\n          self.preferredContentSize = CGSizeMake(maxSize.width, 200);\r\n      }\r\n   }\r\n\r\n   //在下面的方法中更新视图\r\n   -(void)widgetPerformUpdateWithCompletionHandler:(void (^)(NCUpdateResult))completionHandler {\r\n   //    NCUpdateResultNewData   新的内容需要重新绘制视图\r\n   //    NCUpdateResultNoData    部件不需要更新\r\n   //    NCUpdateResultFailed    更新过程中发生错误\r\n     completionHandler(NCUpdateResultNoData);\r\n   }\r\n  ```\r\n\r\n#### 代码共享\r\n\r\n常用的四种代码共享方法：\r\n\r\n1. 将代码打包成 `Framework`，然后 `link` 到主 `App`和 `Widget` 中 **（推荐）**\r\n2. 不怕安装包变大的话，可以考虑将需要的第三方库在主 `App` 和 `Widget` 中分别复制一份 **（推荐）**\r\n3. 将需要共享的文件按图中进行勾选配置\r\n\r\n   ![image](https://file.onnttf.site/2017/09/07/4.jpeg)\r\n\r\n4. 通过 `Pods` 导入，不太建议通过 `Pods` 分别向两个 `Target` 中导入第三方库，因为很容易发生一些不好处理的问题\r\n\r\n#### 数据共享\r\n\r\n常用的两种数据共享方法：\r\n\r\n1. NSUserDefaults\r\n\r\n   和我们常用的方法一样，不过在创建 `NSUserDefaults` 时，需要填写我们之前的 `GroupID`。通过 `GroupID`，我们就可以进行主 `App` 和 `Widget` 之间的数据共享了。\r\n\r\n   ```objc\r\n   // 写入数据\r\n   NSString *groupID = @\"group.com.aaa.bbb\";\r\n   NSUserDefaults *ud = [[NSUserDefaults alloc] initWithSuiteName:groupID];[ud setObject:@\"我是测试的数据\" forKey:@\"test\"];\r\n   [ud synchronize];\r\n\r\n   // 读取数据\r\n   NSString *groupID = @\"group.com.aaa.bbb\";\r\n   NSUserDefaults *ud = [[NSUserDefaults alloc] initWithSuiteName:groupID];\r\n   NSString *value = [ud objectForKey:@\"test\"];\r\n   ```\r\n\r\n2. NSFileManager\r\n\r\n   ```objc\r\n   // 写入数据\r\n   NSString *groupID = @\"group.com.aaa.bbb\";\r\n   NSError *err = nil;\r\n   NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:groupID];\r\n   containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/test\"];\r\n   NSString *value = @\"我是测试的数据\";\r\n   BOOL result = [value writeToURL:containerURL atomically:YES encoding:NSUTF8StringEncoding error:&err];\r\n   if(result){\r\n       NSLog(@\"写入成功\");\r\n   }\r\n\r\n   // 读取数据\r\n   NSString *groupID = @\"group.com.aaa.bbb\";\r\n   NSError *err = nil;\r\n   NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:groupID];\r\n   containerURL = [containerURL URLByAppendingPathComponent:@\"Library/Caches/test\"];\r\n   NSString *value = [NSString stringWithContentsOfURL:containerURL encoding:NSUTF8StringEncoding error:&err];\r\n   ```\r\n\r\n#### 数据刷新\r\n\r\n- `Widget` 从屏幕上消失 2s 左右后，再次出现在屏幕中时，会执行 `viewDidLoad` 方法\r\n- `Widget` 在短时间内频繁地消失显示，会执行 `viewWillAppear` 方法\r\n\r\n如果需要刷新数据，可以根据需求在不同的方法中获取最新数据。\r\n\r\n#### 打开 App\r\n\r\n1. 设置 `App` 的 `URLSchemes`，打开 `APP` 主要通过 `URLScheme` 打开和传递参数值。设置 `URLSchemes` 时，要独特一些，避免与其他 `App` 重复\r\n   ![image](https://file.onnttf.site/2017/09/07/5.jpeg)\r\n2. 在 `Widget` 中添加点击事件，用于触发打开 `App` 的操作和传递参数\r\n\r\n   ```objc\r\n   NSString *schemeString = @\"test_scheme://actionName?paramName=paramValue\";\r\n   [self.extensionContext openURL:[NSURL URLWithString:schemeString] completionHandler:^(BOOL success) {\r\n\r\n   }];\r\n   ```\r\n\r\n3. `Appdelegate` 的代理方法中，截取 `URL`，做响应处理：\r\n\r\n   ```objc\r\n    // 所有版本的都可以使用\r\n    - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {\r\n        [self appCallbackWithOpenUrl:url];\r\n        return YES;\r\n    }\r\n\r\n    // iOS 8 以后\r\n    - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options {\r\n        [self appCallbackWithOpenUrl:url];\r\n        return YES;\r\n    }\r\n\r\n    // iOS 7\r\n    - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {\r\n        [self appCallbackWithOpenUrl:url];\r\n        return YES;\r\n    }\r\n\r\n    - (void)appCallbackWithOpenUrl:(NSURL *)url{\r\n        NSLog(@\"url: %@\", url.host);\r\n        // 针对 url 进行不同的操作\r\n    }\r\n   ```\r\n\r\n## 最后\r\n\r\n随着 `iOS` 生态的持续发展，`Widget` 不仅扩展了应用的功能，还为用户提供了更加直观和便捷的互动方式。\r\n\r\n通过合理利用 `Widget`，开发者能够提升应用的用户体验，使用户能够快速访问重要信息，并通过互动更加流畅地与应用进行连接。\r\n","number":3,"labels":{"nodes":[{"id":"LA_kwDONzrbkM8AAAAB4nYwyw","name":"iOS","url":"https://github.com/onnttf/blog/labels/iOS"}]},"category":{"id":"DIC_kwDONzrbkM4Cmnbf","name":"Show and tell","slug":"show-and-tell","emoji":":raised_hands:","emojiHTML":"<div>🙌</div>"},"author":{"login":"onnttf"},"authorAssociation":"OWNER","createdAt":"2017-08-29T08:00:00Z","updatedAt":"2025-02-03T15:27:41Z","repository":{"id":"R_kgDONzrbkA","url":"https://github.com/onnttf/blog"},"url":"https://github.com/onnttf/blog/discussions/3","jsonFilePath":"discussions/3-D_kwDONzrbkM4AeLcC.json","markdownFilePath":"2017/08/3-D_kwDONzrbkM4AeLcC.md"}
